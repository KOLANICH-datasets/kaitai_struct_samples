                                                   ||   ;;; Bass and Treble Effect
                                                   ||   ;;; By:	   Daniel Bertrand
                                                   ||   ;;; Date:  Dec 19th,200
                                                   ||   ;;; License: GPL v2
                                                   ||   ;;; 
                                                   ||   	name "Eq2"
including file                                     ||   	include "emu_constants.asm"
                                                   ||   ;some hardware constants C_[n]<DecimalValue>, 'n' indicates negative value
                                                   ||   ;		
                                                   ||   ;these are in 2's complement representation
                                                   ||    
                                                   ||   C_0	equ $040	;;00000000
                                                   ||   C_1	equ $041	;;00000001
                                                   ||   C_2	equ $042	;;00000002
                                                   ||   C_3	equ $043	;;00000003
                                                   ||   C_4	equ $044	;;00000004	
                                                   ||   C_8	equ $045	;;00000008
                                                   ||   C_16	equ $046	;;00000010
                                                   ||   C_32	equ $047	;;00000020
                                                   ||   C_256	equ $048	;;00000100
                                                   ||   C_65536 equ $049	;;00010000
                                                   ||   C_2^23 	equ $04A	;;00080000
                                                   ||   C_2^28	equ $04b	;;10000000
                                                   ||   C_2^29	equ $04c	;;20000000 (C_max /4) +1
                                                   ||   C_2^30	equ $04d	;;40000000 ( C_max / 2 ) + 1 (almost half)	
                                                   ||   C_nmax	equ $04e	;;80000000 most negative number
                                                   ||   C_max	equ $04f	;;7fffffff most positive number	
                                                   ||   C_n1	equ $050	;;ffffffff -1
                                                   ||   C_n2	equ $051	;;fffffffe -2
                                                   ||   C_n2^30	equ $052	;;c0000000 C_nmax /2
                                                   ||   
                                                   ||   C_LSshift equ $55	;;to left shift an address by using macsints
                                                   ||   			;;for fractional addresses
                                                   ||   
                                                   ||   
                                                   ||   ZERO equ C_0;
                                                   ||   ONE equ	C_1;
                                                   ||   	
                                                   ||   ;;; Hardware Registers:	
                                                   ||   		
                                                   ||   ACCUM	equ $56
                                                   ||   CCR	equ $57	
                                                   ||   NOISE1	equ $58
                                                   ||   NOISE2	equ $59	
                                                   ||   IRQ	equ $5A	
                                                   ||   DBAC	equ $5B	
                                                   ||   	
                                                   ||   and	macro	dest,srcA,srcB
                                                   ||   	andxor	dest,srcA,srcB,C_0
                                                   ||   	endm
                                                   ||   	
                                                   ||   xor	macro   dest,srcA,srcB
                                                   ||   	andxor	dest,C_n1,srcA,srcB
                                                   ||   	endm
                                                   ||   	
                                                   ||   not	macro	 dest,src
                                                   ||   	andxor   dest,src,C_n1,C_n1		
                                                   ||   	endm
                                                   ||   
                                                   ||   nand	macro	dest,srcA,srcB	
                                                   ||   	andxor	dest,srcA,srcB,C_n1
                                                   ||   	endm
                                                   ||   	
                                                   ||   or	macro	 dest,srcA,srcB
                                                   ||   	not	 C_0,srcA
                                                   ||   	andxor	 dest,ACCUM,srcA,srcB	
                                                   ||   	endm	
                                                   ||   
                                                   ||   nor	macro	dest,srcA,scrB
                                                   ||   	not	dest,srcA
                                                   ||   	andxor	dest,srcB,dest,srcA	
                                                   ||   	not	dest,dest
                                                   ||   	endm
                                                   ||   
                                                   ||   
                                                   ||   neg     macro   dest,src
                                                   ||   	macs1   dest,C_0,C_1,C_nmax 	
                                                   ||   	endm	
                                                   ||   	
                                                   ||   ;;; branch on:
                                                   ||   ;;; ==0
                                                   ||   beq	macro   count
                                                   ||   	skip	CCR,CCR,C_8,count	
                                                   ||   	endm
                                                   ||   ;;; !=0
                                                   ||   bne	macro	count
                                                   ||   	skip	CCR,CCR,C_256,count
                                                   ||   	endm
                                                   ||   ;;; <0
                                                   ||   blt	macro	count
                                                   ||   	skip	CCR,CCR,C_4,count
                                                   ||   	endm
                                                   ||   ;;; always branch
                                                   ||   bra	macro	count
                                                   ||   	skip	C_0,C_max,C_max,count
                                                   ||   	endm
                                                   ||   ;;; on saturation
                                                   ||   bsa     macro count
                                                   ||   	skip CCR,CCR,C_16,count
                                                   ||   	endm
                                                   ||   bge	macro  count
                                                   ||   C___80	con $80
                                                   ||   	skip CCR,CCR,C___80,count	
                                                   ||   	endm
                                                   ||   		
                                                   ||   bgt	macro	count
                                                   ||   C___180	con $180
                                                   ||   	skip CCR,CCR,C___180,count
                                                   ||   	endm
                                                   ||   	
                                                   ||   move	macro dest,src
                                                   ||   	macs  dest,src,C_0,C_0
                                                   ||   	endm	 	
                                                   ||   	
Exiting included file                              ||   	end
                                                   ||   
                                                   ||   ;;; a and b coefs for bass:	
                                                   ||   b_b	con   2.736129417e-01    5.240710533e-01    2.620355267e-01
                                                   ||   a_b	con   9.560258858e-01    -4.576868881e-01
                                                   ||   	
                                                   ||   ;;; a and b coef for treble:	
                                                   ||   b_t con		-4.982305773e-01   9.964611547e-01    -4.982305773e-01
                                                   ||   a_t con 	 9.317583774e-01    -4.356836381e-01
                                                   ||   	
                                                   ||   scalein   con   2.449e-05, 1.157407407e-04
                                                   ||   scaleout con 128, 16192
                                                   ||   		
                                                   ||   bass   control 0.25,#0,#1
                                                   ||   treble control 0.25,#0,#1
                                                   ||   	
                                                   ||   in	IO
                                                   ||   out	equ in
                                                   ||   	
                                                   ||   tmp	dyn
                                                   ||   tmpout	dyn	
                                                   ||   		
                                                   ||   dly_b	sta 0,0
                                                   ||   dly_t	sta 0,0
                                                   ||   			
                                                   ||   	
                                                   ||   	;;; bass filter(iir):
                                                   ||   
0x000   MACW     (02)   0x112,0x040,0x115,0x104    ||   	macw	tmp, C_0,  dly_b+1,  a_b+1
0x002   MACW     (02)   0x112,0x112,0x114,0x103    ||   	macw	tmp, tmp,  dly_b  ,  a_b
0x004   MACW     (02)   0x112,0x112,0x110,0x10a    ||   	macw	tmp,tmp,in,scalein
0x006   MACINTS  (04)   0x112,0x040,0x112,0x042    ||   	macints	tmp, C_0, tmp, C_2
                                                   ||   	
0x008   MACS     (00)   0x040,0x040,0x040,0x040    ||   	macs	C_0,C_0,C_0,C_0
                                                   ||   	
0x00a   MACMV    (07)   0x115,0x114,0x115,0x102    ||   	macmv	dly_b+1,dly_b,	dly_b+1, b_b+2
0x00c   MACMV    (07)   0x114,0x112,0x114,0x101    ||   	macmv	dly_b,tmp,	dly_b,   b_b+1
0x00e   MACW     (02)   0x112,0x056,0x112,0x100    ||   	macw	tmp,ACCUM,	tmp,     b_b	
                                                   ||   	
                                                   ||   	
0x010   MACS     (00)   0x112,0x040,0x10e,0x112    ||   	macs	tmp,C_0,bass,tmp
0x012   MACINTS  (04)   0x113,0x040,0x112,0x10c    ||   	macints	tmpout,C_0,tmp,scaleout
                                                   ||   
                                                   ||   ;;; treble
                                                   ||   	
                                                   ||   
0x014   MACW     (02)   0x112,0x040,0x117,0x109    ||   	macw	tmp, C_0,  dly_t+1,  a_t+1 	
0x016   MACW     (02)   0x112,0x112,0x116,0x108    ||   	macw	tmp, tmp,  dly_t  ,  a_t
0x018   MACW     (02)   0x112,0x112,0x110,0x10b    ||   	macw	tmp, tmp, in,scalein+1
0x01a   MACINTS  (04)   0x112,0x040,0x112,0x042    ||   	macints	tmp,C_0,tmp,C_2
                                                   ||   	
0x01c   MACS     (00)   0x040,0x040,0x040,0x040    ||   	macs	C_0,C_0,C_0,C_0
                                                   ||   	
0x01e   MACMV    (07)   0x117,0x116,0x117,0x107    ||   	macmv	dly_t+1,dly_t,	dly_t+1, b_t+2
0x020   MACMV    (07)   0x116,0x112,0x116,0x106    ||   	macmv	dly_t,tmp,	dly_t,   b_t+1
0x022   MACW     (02)   0x112,0x056,0x112,0x105    ||   	macw	tmp,ACCUM,	tmp,     b_t	
                                                   ||   	
0x024   MACS     (00)   0x112,0x040,0x10f,0x112    ||   	macs	tmp,C_0,treble,tmp
0x026   MACINTS  (04)   0x111,0x113,0x112,0x10d    ||   	macints	out,tmpout,tmp,scaleout+1
                                                   ||   
                                                   ||   	
                                                   ||   	end
Summary:
Patch name: "Eq2"

*****************************GPR******************************
in IN: 0x110, OUT: 0x111
GPR Dynamic:  0x112(tmp)
GPR Dynamic:  0x113(tmpout)
GPR Static:  0x114(dly_b), Value:0x00000000
GPR Static:  0x115(__NO_NAME), Value:0x00000000
GPR Static:  0x116(dly_t), Value:0x00000000
GPR Static:  0x117(__NO_NAME), Value:0x00000000
GPR Control: 0x10e(bass), value:0x1fffffff, Min:0x00000000, Max:0x7fffffff
GPR Control: 0x10f(treble), value:0x1fffffff, Min:0x00000000, Max:0x7fffffff
GPR Constant: 0x100(b_b), Value:0x2305bfb5
GPR Constant: 0x101(__NO_NAME), Value:0x4314c2a0
GPR Constant: 0x102(__NO_NAME), Value:0x218a6150
GPR Constant: 0x103(a_b), Value:0x7a5f0e63
GPR Constant: 0x104(__NO_NAME), Value:0xc56a841d
GPR Constant: 0x105(b_t), Value:0xc039faff
GPR Constant: 0x106(__NO_NAME), Value:0x7f8c0a02
GPR Constant: 0x107(__NO_NAME), Value:0xc039faff
GPR Constant: 0x108(a_t), Value:0x7743dbc6
GPR Constant: 0x109(__NO_NAME), Value:0xc83b84c0
GPR Constant: 0x10a(scalein), Value:0x0000cd6f
GPR Constant: 0x10b(__NO_NAME), Value:0x0003cae7
GPR Constant: 0x10c(scaleout), Value:0x00000080
GPR Constant: 0x10d(__NO_NAME), Value:0x00003f40
*****************************TRAM*****************************
