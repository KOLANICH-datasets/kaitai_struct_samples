                                                   ||   ;;; Simple mono flanger
                                                   ||   ;;; Author:Daniel Bertrand
                                                   ||   ;;; Date: May 29,2000
                                                   ||   
                                                   ||   ;;; This program is free software; you can redistribute it and/or modify  
                                                   ||   ;;; it under the terms of the GNU General Public License as published by  
                                                   ||   ;;; the Free Software Foundation; either version 2 of the License, or     
                                                   ||   ;;; (at your option) any later version.
                                                   ||   
                                                   ||   ;;; References:	
                                                   ||   ;;; http://www.harmony-central.com/Effects/Articles/Flanging/
                                                   ||   		
                                                   ||   ;;;  speed( formerly "delta")=2*pi*freq/48000
                                                   ||   ;;;  this give us our delta value for a specific freq (0.1-0.3Hz is good)
                                                   ||   		
                                                   ||   
including file                                     ||   	include "emu_constants.asm"
                                                   ||   ;some hardware constants C_[n]<DecimalValue>, 'n' indicates negative value
                                                   ||   ;		
                                                   ||   ;these are in 2's complement representation
                                                   ||    
                                                   ||   C_0	equ $040	;;00000000
                                                   ||   C_1	equ $041	;;00000001
                                                   ||   C_2	equ $042	;;00000002
                                                   ||   C_3	equ $043	;;00000003
                                                   ||   C_4	equ $044	;;00000004	
                                                   ||   C_8	equ $045	;;00000008
                                                   ||   C_16	equ $046	;;00000010
                                                   ||   C_32	equ $047	;;00000020
                                                   ||   C_256	equ $048	;;00000100
                                                   ||   C_65536 equ $049	;;00010000
                                                   ||   C_2^23 	equ $04A	;;00080000
                                                   ||   C_2^28	equ $04b	;;10000000
                                                   ||   C_2^29	equ $04c	;;20000000 (C_max /4) +1
                                                   ||   C_2^30	equ $04d	;;40000000 ( C_max / 2 ) + 1 (almost half)	
                                                   ||   C_nmax	equ $04e	;;80000000 most negative number
                                                   ||   C_max	equ $04f	;;7fffffff most positive number	
                                                   ||   C_n1	equ $050	;;ffffffff -1
                                                   ||   C_n2	equ $051	;;fffffffe -2
                                                   ||   C_n2^30	equ $052	;;c0000000 C_nmax /2
                                                   ||   
                                                   ||   C_LSshift equ $55	;;to left shift an address by using macsints
                                                   ||   			;;for fractional addresses
                                                   ||   
                                                   ||   
                                                   ||   ZERO equ C_0;
                                                   ||   ONE equ	C_1;
                                                   ||   	
                                                   ||   ;;; Hardware Registers:	
                                                   ||   		
                                                   ||   ACCUM	equ $56
                                                   ||   CCR	equ $57	
                                                   ||   NOISE1	equ $58
                                                   ||   NOISE2	equ $59	
                                                   ||   IRQ	equ $5A	
                                                   ||   DBAC	equ $5B	
                                                   ||   	
                                                   ||   and	macro	dest,srcA,srcB
                                                   ||   	andxor	dest,srcA,srcB,C_0
                                                   ||   	endm
                                                   ||   	
                                                   ||   xor	macro   dest,srcA,srcB
                                                   ||   	andxor	dest,C_n1,srcA,srcB
                                                   ||   	endm
                                                   ||   	
                                                   ||   not	macro	 dest,src
                                                   ||   	andxor   dest,src,C_n1,C_n1		
                                                   ||   	endm
                                                   ||   
                                                   ||   nand	macro	dest,srcA,srcB	
                                                   ||   	andxor	dest,srcA,srcB,C_n1
                                                   ||   	endm
                                                   ||   	
                                                   ||   or	macro	 dest,srcA,srcB
                                                   ||   	not	 C_0,srcA
                                                   ||   	andxor	 dest,ACCUM,srcA,srcB	
                                                   ||   	endm	
                                                   ||   
                                                   ||   nor	macro	dest,srcA,scrB
                                                   ||   	not	dest,srcA
                                                   ||   	andxor	dest,srcB,dest,srcA	
                                                   ||   	not	dest,dest
                                                   ||   	endm
                                                   ||   
                                                   ||   
                                                   ||   neg     macro   dest,src
                                                   ||   	macs1   dest,C_0,C_1,C_nmax 	
                                                   ||   	endm	
                                                   ||   	
                                                   ||   ;;; branch on:
                                                   ||   ;;; ==0
                                                   ||   beq	macro   count
                                                   ||   	skip	CCR,CCR,C_8,count	
                                                   ||   	endm
                                                   ||   ;;; !=0
                                                   ||   bne	macro	count
                                                   ||   	skip	CCR,CCR,C_256,count
                                                   ||   	endm
                                                   ||   ;;; <0
                                                   ||   blt	macro	count
                                                   ||   	skip	CCR,CCR,C_4,count
                                                   ||   	endm
                                                   ||   ;;; always branch
                                                   ||   bra	macro	count
                                                   ||   	skip	C_0,C_max,C_max,count
                                                   ||   	endm
                                                   ||   ;;; on saturation
                                                   ||   bsa     macro count
                                                   ||   	skip CCR,CCR,C_16,count
                                                   ||   	endm
                                                   ||   bge	macro  count
                                                   ||   C___80	con $80
                                                   ||   	skip CCR,CCR,C___80,count	
                                                   ||   	endm
                                                   ||   		
                                                   ||   bgt	macro	count
                                                   ||   C___180	con $180
                                                   ||   	skip CCR,CCR,C___180,count
                                                   ||   	endm
                                                   ||   	
                                                   ||   move	macro dest,src
                                                   ||   	macs  dest,src,C_0,C_0
                                                   ||   	endm	 	
                                                   ||   	
Exiting included file                              ||   	end
                                                   ||   	name "flanger"
                                                   ||   		
                                                   ||   in	IO
                                                   ||   out	equ in	
                                                   ||   
                                                   ||   	
                                                   ||   	
                                                   ||   speed	  control  2e-05 , 0 , 1e-4 	; Controls frequency (radians)
                                                   ||   delay   control  &7e-3  ,$1600 , 20e-3	; twice (2*) average delay (sec)
                                                   ||   width	  control  #0.33  ,0	 ,0.5	; width control 
                                                   ||   forward	  control  #1	 ,0      ,#1	; forward mix 
                                                   ||   feedback  control  0.3   ,0      ,0.5	; feedback level 
                                                   ||   
                                                   ||   ;; sine generator storage spaces:	
                                                   ||   sinx  sta  0	
                                                   ||   cosx  sta  #0.5
                                                   ||   			
                                                   ||   tmp  dyn 	
                                                   ||   tmp2 dyn
                                                   ||   	
                                                   ||   ;;; Two Delay Lines:	
                                                   ||   	
                                                   ||   	
                                                   ||   dly   delay  &20e-3		;20msec delay line
                                                   ||   	
                                                   ||   write	twrite dly,0		; tram writes
                                                   ||   ready	tread dly,0		; tram reads
                                                   ||   reada   tread dly,0
                                                   ||   				
                                                   ||   ;;;The code:	
                                                   ||   	
                                                   ||   		
                                                   ||   ;;; two opcode sinewave generator (I love this chip!):
0x000   MACS     (00)   0x107,0x107,0x102,0x108    ||   	macs  sinx,sinx,speed,cosx
0x002   MACS1    (01)   0x108,0x108,0x102,0x107    ||   	macs1 cosx,cosx,speed,sinx 
                                                   ||   
                                                   ||   ;;; 0.5Asint+0.5:	
0x004   MACS     (00)   0x109,0x04d,0x107,0x104    ||   	macs tmp,C_2^30,sinx,width
                                                   ||   	
                                                   ||   ;;; calculate address:
0x006   MACS     (00)   0x301,0x300,0x103,0x109    ||   	macs  ready.a,write.a,delay,tmp
                                                   ||   
                                                   ||   ;second addresses for interpolation:
                                                   ||   ;(interesting how the emu engineers decided that $800 wasn't a needed value) 
0x008   MACINTS  (04)   0x302,0x301,0x045,0x048    ||   	macints reada.a,ready.a,C_8,C_256 
                                                   ||   	
                                                   ||   	
                                                   ||   ;;; output values:		
                                                   ||   ;;; 0x55 is 00100000 (?)
0x00a   MACINTS  (04)   0x109,0x040,0x302,0x055    ||   	macints tmp,C_0,reada.a,C_LSshift; get least significant part of address
                                                   ||   	
0x00c   INTERP   (14)   0x10a,0x201,0x109,0x202    ||   	interp tmp2,ready,tmp,reada ;interpolate in-between the two delay line readings
0x00e   MACS     (00)   0x101,0x100,0x10a,0x105    ||   	macs  out,in,tmp2,forward
                                                   ||   	
                                                   ||   
                                                   ||   ;;; feedback and write to the delay line:
                                                   ||   	
0x010   MACS     (00)   0x200,0x100,0x10a,0x106    ||   	macs  write,in,tmp2,feedback
                                                   ||   		
                                                   ||   	
                                                   ||   	end
Summary:
Patch name: "flanger"

*****************************GPR******************************
in IN: 0x100, OUT: 0x101
GPR Dynamic:  0x109(tmp)
GPR Dynamic:  0x10a(tmp2)
GPR Static:  0x107(sinx), Value:0x00000000
GPR Static:  0x108(cosx), Value:0x3fffffff
GPR Control: 0x102(speed), value:0x0000a7c5, Min:0x00000000, Max:0x000346dc
GPR Control: 0x103(delay), value:0x000a8000, Min:0x00001600, Max:0x028f5c28
GPR Control: 0x104(width), value:0x2a3d70a3, Min:0x00000000, Max:0x3fffffff
GPR Control: 0x105(forward), value:0x7fffffff, Min:0x00000000, Max:0x7fffffff
GPR Control: 0x106(feedback), value:0x26666666, Min:0x00000000, Max:0x3fffffff
*****************************TRAM*****************************
Delay-line block:dly, size:0x000003c1
	Read: 0x301/0x201 (ready), offset 0x0000000
	Read: 0x302/0x202 (reada), offset 0x0000000
	Write: 0x300/0x200 (write), offset 0x0000000
